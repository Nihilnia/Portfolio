{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\",\n  class: \"parallax-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"parallax-content\",\n    style: _normalizeStyle($setup.parallaxStyle)\n  }, [_createCommentVNode(\" Your content here \"), _createElementVNode(\"h2\", null, _toDisplayString($props.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($props.description), 1 /* TEXT */)], 4 /* STYLE */)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1","_createElementVNode","style","_normalizeStyle","$setup","parallaxStyle","_createCommentVNode","_toDisplayString","$props","title","description"],"sources":["C:\\Users\\Nihil\\Desktop\\re-licts\\src\\components\\UI\\ParallaxCard.vue"],"sourcesContent":["<template>\r\n  <div ref=\"container\" class=\"parallax-container\">\r\n    <div class=\"parallax-content\" :style=\"parallaxStyle\">\r\n      <!-- Your content here -->\r\n      <h2>{{ title }}</h2>\r\n      <p>{{ description }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from \"vue\";\r\nimport { useParallax } from \"@vueuse/core\";\r\n\r\n// Props for dynamic configuration\r\nconst props = defineProps({\r\n  title: {\r\n    type: String,\r\n    default: \"Parallax Title\",\r\n  },\r\n  description: {\r\n    type: String,\r\n    default: \"Parallax Description\",\r\n  },\r\n  strength: {\r\n    type: Number,\r\n    default: 20, // Control the intensity of the parallax effect\r\n  },\r\n});\r\n\r\nconst container = ref(null);\r\nconst { tilt, roll } = useParallax(container);\r\n\r\n// Calculate parallax style dynamically\r\nconst parallaxStyle = computed(() => ({\r\n  transform: `translateX(${tilt.value * props.strength}px) translateY(${\r\n    roll.value * props.strength\r\n  }px)`,\r\n}));\r\n</script>\r\n\r\n<style scoped>\r\n.parallax-container {\r\n  perspective: 1000px;\r\n  overflow: hidden;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px; /* Adjustable height */\r\n  background: #f5f5f5; /* Fallback background color */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.parallax-content {\r\n  transition: transform 0.2s ease-out; /* Smooth easing */\r\n  will-change: transform;\r\n  padding: 20px;\r\n  background: white;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,GAAG,EAAC,WAAW;EAACC,KAAK,EAAC;;;uBAA3BC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,CAIM;IAJDH,KAAK,EAAC,kBAAkB;IAAEI,KAAK,EAFxCC,eAAA,CAE0CC,MAAA,CAAAC,aAAa;MACjDC,mBAAA,uBAA0B,EAC1BL,mBAAA,CAAoB,YAAAM,gBAAA,CAAbC,MAAA,CAAAC,KAAK,kBACZR,mBAAA,CAAwB,WAAAM,gBAAA,CAAlBC,MAAA,CAAAE,WAAW,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}