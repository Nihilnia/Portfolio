{"ast":null,"code":"export default {\n  name: \"ParallaxCard\",\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    description: {\n      type: String,\n      default: \"No description provided.\"\n    },\n    bgImage: {\n      type: String,\n      default: \"a.jpg\"\n    }\n  },\n  data() {\n    return {\n      rotation: {\n        rotateX: 0,\n        rotateY: 0,\n        translateZ: 0\n      }\n    };\n  },\n  computed: {\n    cardStyle() {\n      return {\n        transform: `perspective(1000px) rotateX(${this.rotation.rotateX}deg) rotateY(${this.rotation.rotateY}deg) translateZ(${this.rotation.translateZ}px)`,\n        backgroundImage: `url(${require(`@/assets/pics/${this.bgImage}`)})`,\n        backgroundSize: \"35%\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\"\n      };\n    }\n  },\n  methods: {\n    handleMouseMove(event) {\n      const card = this.$refs.cardRef; // Access cardRef through this.$refs\n      if (!card) return;\n      const {\n        left,\n        top,\n        width,\n        height\n      } = card.getBoundingClientRect();\n      const centerX = left + width / 2;\n      const centerY = top + height / 2;\n      const mouseX = event.clientX - centerX;\n      const mouseY = event.clientY - centerY;\n      this.rotation.rotateX = -(mouseY / height) * 20; // Max rotation of 20 degrees\n      this.rotation.rotateY = mouseX / width * 20;\n      this.rotation.translateZ = 50;\n    },\n    handleMouseLeave() {\n      this.rotation.rotateX = 0;\n      this.rotation.rotateY = 0;\n      this.rotation.translateZ = 0;\n    }\n  }\n};","map":{"version":3,"names":["name","props","title","type","String","required","description","default","bgImage","data","rotation","rotateX","rotateY","translateZ","computed","cardStyle","transform","backgroundImage","require","backgroundSize","backgroundPosition","backgroundRepeat","methods","handleMouseMove","event","card","$refs","cardRef","left","top","width","height","getBoundingClientRect","centerX","centerY","mouseX","clientX","mouseY","clientY","handleMouseLeave"],"sources":["C:\\Users\\Nihil\\Desktop\\re-licts\\src\\components\\UI\\ParallaxCard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div\r\n      ref=\"cardRef\"\r\n      class=\"pc\"\r\n      :style=\"cardStyle\"\r\n      @mousemove=\"handleMouseMove\"\r\n      @mouseleave=\"handleMouseLeave\"\r\n    >\r\n      <div>\r\n        <h2>{{ title }}</h2>\r\n        <p>{{ description }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"ParallaxCard\",\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      default: \"No description provided.\",\r\n    },\r\n    bgImage: {\r\n      type: String,\r\n      default: \"a.jpg\",\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      rotation: {\r\n        rotateX: 0,\r\n        rotateY: 0,\r\n        translateZ: 0,\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    cardStyle() {\r\n      return {\r\n        transform: `perspective(1000px) rotateX(${this.rotation.rotateX}deg) rotateY(${this.rotation.rotateY}deg) translateZ(${this.rotation.translateZ}px)`,\r\n        backgroundImage: `url(${require(`@/assets/pics/${this.bgImage}`)})`,\r\n        backgroundSize: \"35%\",\r\n        backgroundPosition: \"center\",\r\n        backgroundRepeat: \"no-repeat\",\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    handleMouseMove(event) {\r\n      const card = this.$refs.cardRef; // Access cardRef through this.$refs\r\n      if (!card) return;\r\n\r\n      const { left, top, width, height } = card.getBoundingClientRect();\r\n      const centerX = left + width / 2;\r\n      const centerY = top + height / 2;\r\n      const mouseX = event.clientX - centerX;\r\n      const mouseY = event.clientY - centerY;\r\n\r\n      this.rotation.rotateX = -(mouseY / height) * 20; // Max rotation of 20 degrees\r\n      this.rotation.rotateY = (mouseX / width) * 20;\r\n      this.rotation.translateZ = 50;\r\n    },\r\n    handleMouseLeave() {\r\n      this.rotation.rotateX = 0;\r\n      this.rotation.rotateY = 0;\r\n      this.rotation.translateZ = 0;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pc {\r\n  height: 500px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.pc > div {\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  text-align: center;\r\n  background-blend-mode: overlay;\r\n  background-color: rgba(0, 0, 0, 0.65);\r\n}\r\n</style>\r\n"],"mappings":"AAkBA,eAAe;EACbA,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,WAAW,EAAE;MACXH,IAAI,EAAEC,MAAM;MACZG,OAAO,EAAE;IACX,CAAC;IACDC,OAAO,EAAE;MACPL,IAAI,EAAEC,MAAM;MACZG,OAAO,EAAE;IACX;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,CAAC;QACVC,UAAU,EAAE;MACd;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,SAASA,CAAA,EAAG;MACV,OAAO;QACLC,SAAS,EAAE,+BAA+B,IAAI,CAACN,QAAQ,CAACC,OAAO,gBAAgB,IAAI,CAACD,QAAQ,CAACE,OAAO,mBAAmB,IAAI,CAACF,QAAQ,CAACG,UAAU,KAAK;QACpJI,eAAe,EAAE,OAAOC,OAAO,CAAC,iBAAiB,IAAI,CAACV,OAAO,EAAE,CAAC,GAAG;QACnEW,cAAc,EAAE,KAAK;QACrBC,kBAAkB,EAAE,QAAQ;QAC5BC,gBAAgB,EAAE;MACpB,CAAC;IACH;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,KAAK,EAAE;MACrB,MAAMC,IAAG,GAAI,IAAI,CAACC,KAAK,CAACC,OAAO,EAAE;MACjC,IAAI,CAACF,IAAI,EAAE;MAEX,MAAM;QAAEG,IAAI;QAAEC,GAAG;QAAEC,KAAK;QAAEC;MAAO,IAAIN,IAAI,CAACO,qBAAqB,CAAC,CAAC;MACjE,MAAMC,OAAM,GAAIL,IAAG,GAAIE,KAAI,GAAI,CAAC;MAChC,MAAMI,OAAM,GAAIL,GAAE,GAAIE,MAAK,GAAI,CAAC;MAChC,MAAMI,MAAK,GAAIX,KAAK,CAACY,OAAM,GAAIH,OAAO;MACtC,MAAMI,MAAK,GAAIb,KAAK,CAACc,OAAM,GAAIJ,OAAO;MAEtC,IAAI,CAACxB,QAAQ,CAACC,OAAM,GAAI,EAAE0B,MAAK,GAAIN,MAAM,IAAI,EAAE,EAAE;MACjD,IAAI,CAACrB,QAAQ,CAACE,OAAM,GAAKuB,MAAK,GAAIL,KAAK,GAAI,EAAE;MAC7C,IAAI,CAACpB,QAAQ,CAACG,UAAS,GAAI,EAAE;IAC/B,CAAC;IACD0B,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAAC7B,QAAQ,CAACC,OAAM,GAAI,CAAC;MACzB,IAAI,CAACD,QAAQ,CAACE,OAAM,GAAI,CAAC;MACzB,IAAI,CAACF,QAAQ,CAACG,UAAS,GAAI,CAAC;IAC9B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}